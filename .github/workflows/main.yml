# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Run tests

on:
  push:
    branches: [ bit , initial-bit-integration]
  pull_request:
    branches: [ bit , initial-bit-integration]

jobs:
  build:

    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env: 
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
    - uses: actions/checkout@v2
    - run: |
        apt-get update
        apt-get install --yes --no-install-recommends postgresql-client
    - name: Connect to PostgreSQL
      run: |
        PGPASSWORD=postgres psql -h postgres -c 'CREATE DATABASE bit_schema_test;' -U postgres
        PGPASSWORD=postgres psql -h postgres -c 'CREATE SCHEMA bitschema;' -U postgres -d bit_schema_test
        PGPASSWORD=postgres psql -h postgres -c 'CREATE SCHEMA test_schema;' -U postgres -d bit_schema_test
        PGPASSWORD=postgres psql -h postgres -c 'create SCHEMA test_schema_2;' -U postgres -d bit_schema_test
        PGPASSWORD=postgres psql -h postgres -c '\dn;' -U postgres -d bit_schema_test
        PGPASSWORD=postgres psql -h postgres -c 'show search_path;' -U postgres -d bit_schema_test
        PGPASSWORD=postgres psql -h postgres -c "ALTER DATABASE bit_schema_test SET search_path TO bitschema,public;" -U postgres -d bit_schema_test
        PGPASSWORD=postgres psql -h postgres -c 'show search_path;' -U postgres -d bit_schema_test
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
    - name: Set up Python 3.6
      uses: actions/setup-python@v2
      with:
        python-version: 3.6
    - name: Install dependencies
      run: |
        sudo -H python -m pip install --upgrade pip
        pip --version
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Run tests
      run: |
        python -m unittest discover tests -v
    - name: Generate coverage report
      run: |
        pip install pytest
        pip install pytest-cov
        pytest --cov=./ --cov-report=xml
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        file: ./coverage.xml
        name: codecov-umbrella
        fail_ci_if_error: true
